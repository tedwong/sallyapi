openapi: 3.0.0
tags:
  - name: account
    description: For account login logout
  - name: shop
    description: Retrieving info regarding shops
  - name: user
    description: Retrieveing info regarding users (staff)
info:
  title: Asia bot api
  description: |
    Api doc for Asia bot (web admin panel). Normally except for login api, the rest of the apis require login token in the header. The tokens for mobile and admin panel are not the same.
    The error responses in this doc is not the main focus.
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: hugocheung@instajs.com
    name: Hugo
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
servers:
  - url: 'http://sallyapi.ijs.network:8080/api'
    description: Development endpoint (part of them are responsing hard-coded data)
paths:
  /admin/login:
    post:
      summary: ''
      operationId: post-admin-login
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
                    description: Admin token for the subsequent apis
                  isAdmin:
                    type: boolean
              examples:
                example-1:
                  value:
                    success: true
                    token: 190e8095-64df-4c4c-b77f-5ad8695a8e84
                    isAdmin: true
      description: Admin login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_name:
                  type: string
                password:
                  type: string
              required:
                - user_name
                - password
            examples:
              example-1:
                value:
                  user_name: ''
                  password: ''
      tags:
        - account
  /admin/logout:
    get:
      summary: Your GET endpoint
      tags:
        - account
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
      operationId: get-admin-logout
      description: Admin logout
components:
  schemas:
    LoginRequest:
      type: object
      properties:
        user_name:
          type: string
          example: demoUser
        password:
          type: string
          format: password
          example: '123456'
        device_id:
          type: string
    LoginResponse:
      allOf:
        - $ref: '#/components/schemas/ResponseAbstract'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/LoginResponse_data'
      x-examples:
        example-1:
          success: true
          token: 49645ee0-44c6-4658-88d9-9fdbe8d4c9c4
          dubug_user_id: b725211c-895d-48b9-ba1a-d32ad31337b3
    AnswerTaskRequest:
      required:
        - display_text
        - input_type
        - question_id
        - task_date
        - task_month
        - task_type
        - task_year
      type: object
      properties:
        question_id:
          type: string
        task_type:
          type: integer
        input_type:
          type: string
          enum:
            - text
            - number
            - date
            - fil
        semantic_value:
          type: string
        display_text:
          type: string
          description: the text that the user enters
        file_url:
          type: string
        file_type:
          type: string
          description: 'client side defined field, for sorting the file type(e.g. HCV, IVSS,CRC)'
        task_date:
          type: integer
          example: 1
        task_month:
          type: integer
          example: 2
        task_year:
          type: integer
          example: 2020
    AnswerTaskResponse:
      type: object
      properties:
        next_question_id:
          type: string
        task_type:
          type: string
        desc:
          type: string
        semantic_value:
          type: string
        input_type:
          type: string
          enum:
            - text
            - number
            - date
            - file
    TaskDetail:
      type: array
      items:
        $ref: '#/components/schemas/TaskDetail_inner'
    ResponseAbstract:
      allOf:
        - properties:
          success:
            type: boolean
          message:
            type: string
        - properties:
          data:
            type:
              - object
            properties:
              total_length:
                type: number
              page_size:
                type: number
              history:
                type: array
                items:
                  type: object
                  properties:
                    content:
                      type: string
                    chat_type:
                      type: string
                    create_date:
                      type: string
                      example: '2020-05-21 19:05:27'
                    create_by:
                      type: string
                      enum:
                        - bot
                        - '"${user_guid}"'
      title: ''
      description: ''
      type: object
    TaskResponse:
      allOf:
        - $ref: '#/components/schemas/ResponseAbstract'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/TaskDetail'
    NotificationResponse:
      allOf:
        - $ref: '#/components/schemas/ResponseAbstract'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/NotificationAbstract'
    NotificationAbstract:
      type: object
      properties:
        message_en:
          type: string
        message_hk:
          type: string
        notify_time:
          type: string
          description: the time of the message being pushed to user
          example: '04-24-2020 07:35:37'
        task_id:
          type: string
          description: to help decide how to reply (calling which api) to this message
          example: tast_id_1
        task_type:
          type: string
          description: to determine front end icon in the notification box
          example: petty_cash
          enum:
            - petty_cash
            - po
            - ehr
    AllShopResponse:
      type: array
      items:
        $ref: '#/components/schemas/ShopByIdResponse'
    ShopByIdResponse:
      type: object
      properties:
        name:
          type: string
        shop_code:
          type: string
        address:
          type: string
        tel:
          type: string
        picId:
          type: string
    PoFormResponse:
      allOf:
        - $ref: '#/components/schemas/ResponseAbstract'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/PoFormResponse_data'
    AllUsers:
      type: array
      items:
        $ref: '#/components/schemas/User'
    User:
      type: object
      properties:
        staff_id:
          type: string
        full_name:
          type: string
        email:
          type: string
        tel:
          type: string
          example: '66667777'
        gender:
          type: string
          enum:
            - F
            - M
        direct_line:
          type: string
          example: '22223333'
        department:
          type: string
        avatar_url:
          type: string
      xml:
        name: User
      x-tags:
        - user
    Doctor:
      type: object
      properties:
        doctor_code:
          type: string
        full_name:
          type: string
        email:
          type: string
        tel:
          type: string
        gender:
          type: string
      xml:
        name: Doctor
    AllDoctors:
      type: array
      items:
        $ref: '#/components/schemas/Doctor'
    GetAllReportUrlResponse:
      type: object
      properties:
        total_length:
          type: integer
          description: total number of records
          example: 21
        page_size:
          type: integer
          description: the number of records returned per each page
          example: 20
        page:
          type: integer
          description: the page of the message records returned
          example: 1
        reports:
          type: array
          items:
            $ref: '#/components/schemas/GetAllReportUrlResponse_reports'
    PostChatHistoryRequest:
      required:
        - chat_type
        - content
        - from
      type: object
      properties:
        chat_type:
          type: string
          description: 'client-side defined type, used for future sorting (e.g. text, image, audio, url, etc)'
          enum:
            - text
            - image
            - audio
        from_bot:
          type: boolean
          description: "from user or 'bot'"
          example: true
        content:
          type: string
    GetChatHistoryResponse:
      type: object
      properties:
        total_length:
          type: integer
          description: total number of records
          example: 1
        page_size:
          type: integer
          description: the number of records returned per each page
          example: 20
        page:
          type: integer
          description: the page of the message records returned
          example: 0
        history:
          type: array
          items:
            $ref: '#/components/schemas/GetChatHistoryResponse_history'
    AssignRequest:
      type: object
      properties:
        doctors:
          type: array
          items:
            type: string
            description: doctor id
            example: '["doctor_id_1","doctor_id_2"]'
    CreateUser:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        tel:
          type: string
        gender:
          type: string
        direct_line:
          type: string
    ResetPassword:
      type: object
      properties:
        email:
          type: string
        user_name:
          type: string
    UpdateUser:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        current_password:
          type: string
        new_password:
          type: string
        tel:
          type: string
        gender:
          type: string
        direct_line:
          type: string
    inline_response_200:
      type: object
      properties:
        token:
          type: string
      allOf:
        - $ref: '#/components/schemas/ResponseAbstract'
    inline_response_200_1:
      allOf:
        - $ref: '#/components/schemas/ResponseAbstract'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/GetAllReportUrlResponse'
    inline_response_200_2:
      oneOf:
        - $ref: '#/components/schemas/Doctor'
        - $ref: '#/components/schemas/AllDoctors'
    inline_response_200_3:
      properties:
        data:
          $ref: '#/components/schemas/GetChatHistoryResponse'
      allOf:
        - $ref: '#/components/schemas/ResponseAbstract'
    LoginResponse_data:
      type: object
      properties:
        token:
          type: string
          example: 6d960c30-4279-48eb-831f-96db450060cc
        expiry_time:
          type: string
          example: '04-24-2020 07:35:37'
    TaskDetail_inner:
      type: object
      properties:
        question_id:
          type: string
        task_type:
          type: integer
        step_num:
          type: integer
          description: for ordering the tasks
        display_text:
          type: string
          description: "the reply from the user's input"
        semantic_value:
          type: string
        desc:
          type: string
          description: the question (task description)
        status:
          type: string
          description: 'submitted = whole task is finished & report is submitted & cannot make any changes'
          enum:
            - draft
            - submitted
        input_type:
          type: string
          enum:
            - text
            - number
            - date
            - file
        file_url:
          type: string
          description: the file url uploaded by the client side(if any)
        file_type:
          type: string
          description: 'front-end-defined type, acts as a param for future retrieve'
          example: HCV
        create_time:
          type: string
        task_date:
          type: integer
          example: 28
        task_month:
          type: integer
          example: 4
        task_year:
          type: integer
          example: 2020
    PoFormResponse_data:
      type: object
      properties:
        form_url:
          type: string
        form_type:
          type: string
          enum:
            - templateForm
            - mainForm
    GetAllReportUrlResponse_reports:
      type: object
      properties:
        url:
          type: string
        shop_id:
          type: string
          example: shop_id_1
        report_type:
          type: string
        status:
          type: string
          example: submitted
        report_date:
          type: integer
          example: 28
        report_month:
          type: integer
          example: 4
        report_year:
          type: integer
          example: 2020
        create_time:
          type: string
          example: '04-24-2020 07:35:37'
        modify_by:
          type: string
        modify_date:
          type: string
          example: '04-24-2020 07:35:38'
        create_by:
          type: string
    GetChatHistoryResponse_history:
      type: object
      properties:
        create_time:
          type: string
          example: '04-24-2020 07:35:37'
        content:
          type: string
          example: 'https://the_1st_record.com'
        chat_type:
          type: string
          example: url
        chat_date:
          type: integer
          example: 28
        chat_month:
          type: integer
          example: 4
        chat_year:
          type: integer
          example: 2020
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      required: true
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
